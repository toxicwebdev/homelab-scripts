# Copyright (c) 2021-2025 tteck
# Author: tteck (tteckster)
# Co-Author: MickLesk
# License: MIT | https://raw.githubusercontent.com/toxicwebdev/homelab-scripts/main/LICENSE

# This function sets color variables for formatting output in the terminal
color() {
  # Colors
  YW=$(echo "\033[33m")
  YWB=$(echo "\033[93m")
  BL=$(echo "\033[36m")
  RD=$(echo "\033[01;31m")
  GN=$(echo "\033[1;92m")

  # Formatting
  CL=$(echo "\033[m")
  BFR="\\r\\033[K"
  BOLD=$(echo "\033[1m")
  TAB="  "

  # System
  RETRY_NUM=10
  RETRY_EVERY=3
  i=$RETRY_NUM

  # Icons
  CM="${TAB}‚úîÔ∏è${TAB}${CL}"
  CROSS="${TAB}‚úñÔ∏è${TAB}${CL}"
  INFO="${TAB}üí°${TAB}${CL}"
  NETWORK="${TAB}üì°${TAB}${CL}"
  OS="${TAB}üñ•Ô∏è${TAB}${CL}"
  OSVERSION="${TAB}üåü${TAB}${CL}"
  HOSTNAME="${TAB}üè†${TAB}${CL}"
  GATEWAY="${TAB}üåê${TAB}${CL}"
  DEFAULT="${TAB}‚öôÔ∏è${TAB}${CL}"
}

# This function enables IPv6 if it's not disabled and sets verbose mode if the global variable is set to "yes"
verb_ip6() {
  if [ "$VERBOSE" = "yes" ]; then
    STD=""
  else STD="silent"; fi
  silent() { "$@" >/dev/null 2>&1; }
  if [ "$DISABLEIPV6" == "yes" ]; then
    $STD sysctl -w net.ipv6.conf.all.disable_ipv6=1
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >>/etc/sysctl.conf
    $STD rc-update add sysctl default
  fi
}

# This function catches errors and handles them with the error handler function
catch_errors() {
  set -Eeuo pipefail
  trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

# This function handles errors
error_handler() {
  local exit_code="$?"
  local line_number="$1"
  local command="$2"
  local error_message="${RD}[ERROR]${CL} in line ${RD}$line_number${CL}: exit code ${RD}$exit_code${CL}: while executing command ${YW}$command${CL}"
  echo -e "\n$error_message\n"
}

# This function displays an informational message with a yellow color.
msg_info() {
  local msg="$1"
  echo -ne " ${TAB}${YW}${msg}"
}

# This function displays a success message with a green color.
msg_ok() {
  local msg="$1"
  echo -e "${BFR}${CM}${GN}${msg}${CL}"
}

# This function displays a error message with a red color.
msg_error() {
  local msg="$1"
  echo -e "${BFR}${CROSS}${RD}${msg}${CL}"
}

# This function sets up the Container OS by generating the locale, setting the timezone, and checking the network connection
setting_up_container() {
  msg_info "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.."
  while [ $i -gt 0 ]; do
    if [ "$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d'/' -f1)" != "" ]; then
      break
    fi
    echo 1>&2 -en "${CROSS}${RD} –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –°–µ—Ç—å! "
    sleep $RETRY_EVERY
    i=$((i - 1))
  done

  if [ "$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d'/' -f1)" = "" ]; then
    echo 1>&2 -e "\n${CROSS}${RD} –°–µ—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ $RETRY_NUM –ø–æ–ø—ã—Ç–æ–∫${CL}"
    echo -e "${NETWORK}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏"
    exit 1
  fi
  msg_ok "–ù–∞—Å—Ç—Ä–æ–∏–ª –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."
  msg_ok "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –í–∞—à–µ–π —Å–µ—Ç–∏. IP: ${BL}$(ip addr show | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1 | tail -n1)${CL}"
}

# This function checks the network connection by pinging a known IP address and prompts the user to continue if the internet is not connected
network_check() {
  set +e
  trap - ERR
  if ping -c 1 -W 1 1.1.1.1 &>/dev/null || ping -c 1 -W 1 8.8.8.8 &>/dev/null || ping -c 1 -W 1 9.9.9.9 &>/dev/null; then
    msg_ok "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–µ–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ";
  else
    msg_error "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–µ–Ω–µ–Ω–∏–µ –ù–ï –¥–æ—Å—Ç—É–ø–Ω–æ"
    read -r -p "–°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å? <y/N> " prompt
    if [[ "${prompt,,}" =~ ^(y|yes)$ ]]; then
      echo -e "${INFO}${RD}–ë–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É - –æ–∂–∏–¥–∞—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π —Å–∫—Ä–∏–ø—Ç–∞${CL}"
    else
    echo -e "${NETWORK}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏"
      exit 1
    fi
  fi
  RESOLVEDIP=$(getent hosts github.com | awk '{ print $1 }')
  if [[ -z "$RESOLVEDIP" ]]; then msg_error "–û—à–∏–±–∫–∞. DNS —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω "; else msg_ok "DNS —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω github.com: ${BL}$RESOLVEDIP${CL}"; fi
  set -e
  trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
}

# This function updates the Container OS by running apt-get update and upgrade
update_os() {
  msg_info "–û–±–Ω–æ–≤–ª—è—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
  $STD apk update
  $STD apk upgrade
  msg_ok "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."
}

# This function modifies the message of the day (motd) and SSH settings
motd_ssh() {
  # Set terminal to 256-color mode
  echo "export TERM='xterm-256color'" >>/root/.bashrc
  IP=$(ip -4 addr show eth0 | awk '/inet / {print $2}' | cut -d/ -f1 | head -n 1)
  # Get OS information
  if [ -f "/etc/os-release" ]; then
    OS_NAME=$(grep ^NAME /etc/os-release | cut -d= -f2 | tr -d '"')
    OS_VERSION=$(grep ^VERSION_ID /etc/os-release | cut -d= -f2 | tr -d '"')
  else
    OS_NAME="Alpine Linux"
    OS_VERSION="Unknown"
  fi
  # Set MOTD with application info and system details
  MOTD_FILE="/etc/motd"
  if [ -f "$MOTD_FILE" ]; then
    echo -e "\n${BOLD}${APPLICATION} LXC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä${CL}" > "$MOTD_FILE"
    echo -e "${TAB}${GATEWAY}${YW} –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞: ${GN}community-scripts ORG ${YW}| Project: ${GN}ProxmoxVE ${YW}| GitHub: ${GN}https://github.com/community-scripts/ProxmoxVE${CL}\n" >> "$MOTD_FILE"
    echo -e "${TAB}${OS}${YW} OS: ${GN}${OS_NAME} ${OS_VERSION}${CL}" >> "$MOTD_FILE"
    echo -e "${TAB}${HOSTNAME}${YW} Hostname: ${GN}$(hostname)${CL}" >> "$MOTD_FILE"
    echo -e "${TAB}${INFO}${YW} IP Address: ${GN}${IP}${CL}" >> "$MOTD_FILE"
  else
    echo -e "${RD}[WARNING] MOTD file does not exist!${CL}" >&2
  fi
  # Configure SSH if enabled
  if [[ "${SSH_ROOT}" == "yes" ]]; then
    # Enable sshd service
    $STD rc-update add sshd
    # Allow root login via SSH
    sed -i "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g" /etc/ssh/sshd_config
    # Start the sshd service
    $STD /etc/init.d/sshd start
  fi
}

# This function customizes the container and enables passwordless login for the root user
customize() {
  if [[ "$PASSWORD" == "" ]]; then
  msg_info "–ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.."
  bash -c "passwd -d root" >/dev/null 2>&1
  msg_ok "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Å—Ç–æ–º–µ–∑–∏—Ä–æ–≤–∞–Ω."
  fi
}
